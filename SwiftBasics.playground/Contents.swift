import Foundation
// слово import значит, что мы импортируем бибиотеку
// Foundation - название библиотеки, которую мы импортируем
// Библиотека (library) это набор уже написанного кода, который мы будем использовать
// Foundation - библиотека, написанная apple c основными элементами. Она используется везде.
import UIKit // тоже в себе содержит Foundation, но еще и содержит всякие штуки для создания UI
// UI - это все, что видит пользователь. Вся визуальщина.

let number = 1 // создаем константу, которая имеет имя number и значение 1
// если мы не напишем let то компилятор будет искать уже существующую констнту с именем number
// и выдаст ошибку т.к. не найдет. Но после того как мы создали, можем с ней что-то делать
// если мы опять напишем let number = 1, компилятор скажет, что это имя уже занято.
var secondNumber = 2 // создаем переменную secondNumber = 2
secondNumber = 0 // меняем значение уже созданной переменной

var thirdNumber: Int // создали переменную которая может содержать в себе значение только типа Int
// сейчас она содержит nil. Это типа ничего не содержит или содержит пустоту.
thirdNumber = 3 // присвоили пятерку

var someString: String = "какая-то строка" // создали переменную типа String(строка) и присвоили ей строку
// Все, что между двумя ковычками - это строка

// MARK: Функции
// Функция - это набор какого-то кода, который выполняет компьютер
// Компьютер не выполняет тупа все подряд, что написано
// Мы создаем функцию и даей ей имя, чтобы потом можно было уже выполнить
// Функция создается с помощью ключевого слова func
func nameOfFunction() {} // создали функцию с именем nameOfFunction которая ничего не делает
nameOfFunction() // здесь мы вызвали эту функцию, но она ничего не делает
// то, что будет делать функция нужно написать в фигурных суобках
func secondFunction() { // создали функцию, которая создает переменную numberFive равную 5
    var numberFive = 5
} // но мы ее не вызывали, поэтому этот код не выполнился
secondFunction() // вот в этом месте уже выполнится тот код, который находится в фигурных скобках

// Функция может просто что-то выполнять, но еще она может что-то возвращать, как результат своего выполнения
// и может что-то принимать, что может быть нужно для ее работы.

//
// Служебное_слово_func имяФункции(параметры которые она будет принимать) -> То_что_она_вернет {и сам код что она делает }
func twiceNumber(number: Int) -> Int {
    let newNumber = number * 2
    return newNumber
}
// создали функцию которая умножит на два то, что мы в нее положим при вызове и вернет умноженное на 2
let ten = twiceNumber(number: 5) // ten будет равен 10

// мы можем что-то передавать в функцию, но она может ничего не возвращать, типа как фенкция print()
print(ten) // она ничего не возвращает, но принимает аргумент.
// мы не создавали эту функцию т.к. она уже создана за нас

func printIntAndString(parameter1: Int, parameter2: String) { // принимает параметры но не возвращает
    print(parameter1) // parameter1 - имя первого параметра, которое мы можем использовать в теле функции
    print(parameter2) // тело - это в фигурных скобках.
}

printIntAndString(parameter1: secondNumber, parameter2: someString)
//вызвали функцию, которая печатает то, что мы в нее передали
// передали мы в нее а

func returnFive() -> Int {
    return 5 // return(вернуть) специальное слово, которое обозначает что именно вернуть из кода
}

